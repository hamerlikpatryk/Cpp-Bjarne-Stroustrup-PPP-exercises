// Zrobic drill ze str 707.

#include "std_lib_facilities.hpp"

template<typename T> struct S 
{ 
	S() : val(T()) {}
	S(T d) : val(d) {}   
	T& operator=(const T&); 
	T& get();               
	const T& get() const;   
	void set(const T& d);   
private:
	T val;
};

template<typename T> T& S<T>::operator=(const T& d)
{
	val = d;
	return val;
}

template<typename T> T& S<T>::get() { return val; };

template<typename T> const T& S<T>::get() const { return val; };

template<typename T> void S<T>::set(const T& d) { val = d; };


template<typename T> istream& operator>>(istream& is, S<T>& ss)
{
	T v;
	cin >> v;
	if (!is) return is;
	ss = v;
	return is;
}

template<typename T> void read_val(T& v)
{
	cin >> v;
}

template<typename T> ostream& operator<<(ostream& os, const vector<T>& d)
{
	os << "{ ";
	for (int i = 0; i<d.size(); ++i) {
		os << d[i];
		if (i<d.size() - 1) os << ',';
		os << ' ';
	}
	os << "}";
	return os;
}

template<typename T> istream& operator>>(istream& is, vector<T>& d)
{
	char ch1;
	char ch2;
	T temp;
	vector<T> v_temp;
	is >> ch1;
	if (!is) return is;
	if (ch1 != '{') {
		is.clear(ios_base::failbit);
		return is;
	}
	while (cin >> temp >> ch2 && ch2 == ',') {
		v_temp.push_back(temp);
	}
	if (ch2 != '}') {
		is.clear(ios_base::failbit);
		return is;
	}
	v_temp.push_back(temp); 

							
	d = v_temp;
}




int main()
{
	S<int> sint(10);
	S<char> schar('a');
	S<double> sdouble(1.11);
	S<string> sstring("MyString11");

	vector<int> vec;
	vec.push_back(1);
	vec.push_back(2);
	vec.push_back(3);
	S< vector<int> > svint(vec);

/*	cout << "s int: " << sint.val << endl;
    cout << "s char: " << schar.val << endl;
    cout << "s double: " << sdouble.val << endl;
    cout << "s string: " << sstring.val << endl;
    for (int i = 0; i<svint.val.size(); ++i)
	{ 
        cout << "s v int[" << i << "]: " << svint.val[i] << endl;
	}
*/    //dziaÅ‚a jedynie na public

	cout << "s int: " << sint.get() << endl;
	cout << "s char: " << schar.get() << endl;
	cout << "s double: " << sdouble.get() << endl;
	cout << "s string: " << sstring.get() << endl;
	for (int i = 0; i<svint.get().size(); ++i)
	{ 
		cout << "s v int[" << i << "]: " << svint.get()[i] << endl;
	}
	cout << sint.get() << endl;


	/*sint.set(87);
	schar.set('y');
	sdouble.set(4.22);
	sstring.set("MyString 2");
	vec[1] = 42;
	svint.set(vec);
	cout << "s int: " << sint.get() << endl;
	cout << "s char: " << schar.get() << endl;
	cout << "s double: " << sdouble.get() << endl;
	cout << "s string: " << sstring.get() << endl;
	for (int i = 0; i < svint.get().size(); ++i)
	{
		cout << "s v int[" << i << "]: " << svint.get()[i] << endl;
	}
	svint.get() */

	sint = 87;
	schar = 'C';
	sdouble = 6.54;
	sstring = "MyString 3";
	vec[1] = 23;
	svint = vec;
	cout << "s int: " << sint.get() << endl;
	cout << "s char: " << schar.get() << endl;
	cout << "s double: " << sdouble.get() << endl;
	cout << "s string: " << sstring.get() << endl;
	for (int i = 0; i<svint.get().size(); ++i)
		cout << "s v int[" << i << "]: " << svint.get()[i] << endl;
	svint.get();

	const S<int> c_s_int(5);
	cout << "c s int: " << c_s_int.get() << endl;


	cout << "s int: ";
	read_val(sint);
	cout << endl << "s char: ";
	read_val(schar);
	cout << endl << "s double: ";
	read_val(sdouble);
	cout << endl << "s string: ";
	read_val(sstring);
	cout << "s int: " << sint.get() << endl;
	cout << "s char: " << schar.get() << endl;
	cout << "s double: " << sdouble.get() << endl;
	cout << "s string: " << sstring.get() << endl;

	cout << "s v int: ";
	read_val(svint);
	cout << endl << "s v int: " << svint.get() << endl;


	system("pause");
}
